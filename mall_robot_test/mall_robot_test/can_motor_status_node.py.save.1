import rclpy
from rclpy.node import Node
from std_msgs.msg import Header
from geometry_msgs.msg import TwistStamped
from mall_robot_msgs.msg import RMDMotorStatus

import can
import math

# Constants
WHEEL_RADIUS = 0.1       # in meters
WHEEL_SEPARATION = 0.564 # in meters

class CANMotorStatusNode(Node):
    def __init__(self):
        super().__init__('can_motor_status_node')

        # Motor IDs
        self.motor_ids = [0x141, 0x142]
        self.motors_position = {0x141: 'left', 0x142: 'right'}

        # Publishers
        self.motor_publishers = {
            mid: self.create_publisher(RMDMotorStatus, f'/rmd_motor_status_{self.motors_position[mid]}', 10)
            for mid in self.motor_ids
        }
        self.vel_pub = self.create_publisher(TwistStamped, '/encoder_vel', 10)
        self.latest_vel_ang = {mid: 0.0 for mid in self.motor_ids}

        # === CAN interface using slcan ===
        self.can_interface = '/dev/ttyACM0'  # Adjust to your actual interface
        self.bitrate = 1000000               # 1 Mbps
        self.bus = can.interface.Bus(bustype='slcan', channel=self.can_interface, bitrate=self.bitrate)

        # Timer
        self.timer = self.create_timer(0.1, self.read_all_motor_status)

    def request_status(self, tx_id, rx_id, cmd_byte):
        msg = can.Message(arbitration_id=tx_id, data=[cmd_byte] + [0x00]*7, is_extended_id=False)
        self.bus.send(msg)
        for _ in range(10):
            res = self.bus.recv(timeout=0.01)
            if res and res.arbitration_id == rx_id and res.data[0] == cmd_byte:
                return res.data
        

    def read_all_motor_status(self):
        for motor_id in self.motor_ids:
            tx_id = motor_id
            rx_id = 0x100 + motor_id

            msg_out = RMDMotorStatus()
            msg_out.header = Header()
            msg_out.header.stamp = self.get_clock().now().to_msg()

            try:
                # === Status 1 ===
                data1 = self.request_status(tx_id, rx_id, 0x9A)
                if data1:
                    msg_out.temperature = int.from_bytes(data1[1:2], 'little', signed=True)
                    print('Temp' + msg_out.temperature)
                    msg_out.brake_control_command = int.from_bytes(data1[3:4], 'little', signed=False)
                    msg_out.bus_voltage = int.from_bytes(data1[4:6], 'little', signed=False) / 10.0
                    msg_out.error_flag = int.from_bytes(data1[6:8], 'little', signed=False)

                # === Status 2 ===
                data2 = self.request_status(tx_id, rx_id, 0x9C)
                if data2:
                    msg_out.iq_current = int.from_bytes(data2[2:4], 'little', signed=True) / 100.0
                    msg_out.speed_shaft = int.from_bytes(data2[4:6], 'little', signed=True) / 1.0
                    msg_out.degree_shaft = int.from_bytes(data2[6:8], 'little', signed=True) / 1.0
                    self.latest_vel_ang[motor_id] = (msg_out.speed_shaft) * math.pi / 180  # rad/s

                # === Status 3 ===
                data3 = self.request_status(tx_id, rx_id, 0x9D)
                if data3:
                    msg_out.phase_current_a = int.from_bytes(data3[2:4], 'little', signed=True) / 100.0
                    msg_out.phase_current_b = int.from_bytes(data3[4:6], 'little', signed=True) / 100.0
                    msg_out.phase_current_c = int.from_bytes(data3[6:8], 'little', signed=True) / 100.0

                self.motor_publishers[motor_id].publish(msg_out)
                self.get_logger().info(f"Status message motor {motor_id}: {msg_out}")

            except Exception as e:
                self.get_logger().error(f"Error reading motor {motor_id}: {e}")

        # === Compute and publish robot velocity ===
        if all(mid in self.latest_vel_ang for mid in self.motor_ids):
            vel_ang_l = self.latest_vel_ang[0x141]
            vel_ang_r = self.latest_vel_ang[0x142]

            vx = (vel_ang_r + vel_ang_l) / 2.0
            vy = 0.0
            vtheta = (vel_ang_r - vel_ang_l) / WHEEL_SEPARATION

            twist_msg = TwistStamped()
            twist_msg.header.stamp = self.get_clock().now().to_msg()
            twist_msg.header.frame_id = "base_link"
            twist_msg.twist.linear.x = vx
            twist_msg.twist.linear.y = vy
            twist_msg.twist.angular.z = vtheta

            self.vel_pub.publish(twist_msg)

def main(args=None):
    rclpy.init(args=args)
    node = CANMotorStatusNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
